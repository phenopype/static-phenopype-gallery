{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Stickleback landmarks\n",
    "\n",
    "For a more detailed description see: <https://www.phenopype.org/gallery/projects/stickleback-landmarks/>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "phenopype successfully imported the following plugin dependencies:\n",
      "torch\n"
     ]
    }
   ],
   "source": [
    "import phenopype as pp\n",
    "import os \n",
    "\n",
    "## my root directory - modify as you see fit \n",
    "os.chdir(r\"D:\\science\\packages\\phenopype\\phenopype-gallery_exec\")\n",
    "\n",
    "## my laptop has a small screen, so I use a smaller phenopype window\n",
    "pp._config.window_max_dim = 800"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Make phenopype project\n",
    "\n",
    "Create a phenopype project (remember, `Project` is used to both create new projects, and load existing ones). Different phenopype projects can be useful, e.g., to process different batches of images from field seasons, perspectives, etc,. It makes sense to create them side by side in a subfolder, which I call \"phenopype\". Thus, my research projects often have the following directory structure (just my way of working - this is really totally up to you):\n",
    "\n",
    "```\n",
    "my-project\n",
    "    data                       # processed data (e.g., tables)\n",
    "    data_raw                   # raw data (images, videos, etc.)\n",
    "    phenopype                  # phenopype projects\n",
    "    phenopype_templates        # phenopype .yaml config templates\n",
    "    scripts                    # python, R, etc.\n",
    "    [...]                      # manuscripts, figures, literature, etc.\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--------------------------------------------\n",
      "Creating a new phenopype project directory at:\n",
      "D:\\science\\packages\\phenopype\\phenopype-gallery_exec\\phenopype\\stickleback-landmarks\n",
      "\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Proceed? (y/n)\n",
      " y\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Project \"stickleback-landmarks\" successfully created.\n",
      "--------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "proj = pp.Project(r\"phenopype\\stickleback-landmarks\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--------------------------------------------\n",
      "phenopype will search for image files at\n",
      "\n",
      "D:\\science\\packages\\phenopype\\phenopype-gallery_exec\\data_raw\\stickleback-landmarks\n",
      "\n",
      "using the following settings:\n",
      "\n",
      "filetypes: ['jpg', 'JPG', 'jpeg', 'JPEG', 'tif', 'png', 'bmp'], include: [], exclude: [], mode: copy, recursive: False, resize: False, unique: path\n",
      "\n",
      "Found image stickle1.jpg - phenopype-project folder 0__stickle1 created\n",
      "Found image stickle2.jpg - phenopype-project folder 0__stickle2 created\n",
      "Found image stickle3.jpg - phenopype-project folder 0__stickle3 created\n",
      "\n",
      "Found 3 files - using all\n",
      "--------------------------------------------\n",
      "- template saved under D:\\science\\packages\\phenopype\\phenopype-gallery_exec\\phenopype\\stickleback-landmarks\\data\\0__stickle1\\pype_config_v1.yaml\n",
      "- template saved under D:\\science\\packages\\phenopype\\phenopype-gallery_exec\\phenopype\\stickleback-landmarks\\data\\0__stickle2\\pype_config_v1.yaml\n",
      "- template saved under D:\\science\\packages\\phenopype\\phenopype-gallery_exec\\phenopype\\stickleback-landmarks\\data\\0__stickle3\\pype_config_v1.yaml\n"
     ]
    }
   ],
   "source": [
    "proj.add_files(image_dir = r\"data_raw\\stickleback-landmarks\", exclude=\"side\")\n",
    "proj.add_config(template_path=r\"phenopype_templates\\stickleback-landmarks_template1.yaml\", tag=\"v1\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "\n",
    "```{figure} ../_assets/images/stickleback-landmarks_reference.gif\n",
    "---\n",
    "width: 600px\n",
    "---\n",
    "Next we need to add information from a reference image to provide a project wide px-to-mm scale, which we will need to adjust our landmark coordinate space. This is important if for example the distance between the camera and your sample changes.  \n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Reference set\n",
      "Reference image saved under D:\\science\\packages\\phenopype\\phenopype-gallery_exec\\phenopype\\stickleback-landmarks\\reference\\stickle-scale_full_image.tif\n",
      "Reference image saved under D:\\science\\packages\\phenopype\\phenopype-gallery_exec\\phenopype\\stickleback-landmarks\\reference\\stickle-scale_search_template.tif\n",
      "Saved reference info to project attributes.\n",
      "setting active global project reference to \"stickle-scale\" for 0__stickle1 (active=True)\n",
      "setting active global project reference to \"stickle-scale\" for 0__stickle2 (active=True)\n",
      "setting active global project reference to \"stickle-scale\" for 0__stickle3 (active=True)\n"
     ]
    }
   ],
   "source": [
    "## set the project-wide reference. the reference has its own tag, in case your project uses multiple reference cards\n",
    "proj.add_reference(reference_image_path= os.path.join(r\"data_raw\\stickleback-landmarks\",\"stickleback_side.jpg\"), reference_tag=\"stickle-scale\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```{figure} ../_assets/images/stickleback-landmarks_set-landmarks.gif\n",
    "---\n",
    "width: 600px\n",
    "align: center\n",
    "---\n",
    "You can modify, for instance, point size and colour for the landmarks while adding them (or before adding the template). Note that point characteristics need to be changed separately for setting the landmarks and visualizing them (this goes for all GUI-annotations like masks, lines, etc.).\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "AUTOLOAD\n",
      "- reference template image loaded from root directory\n",
      "Stage: add annotation control args\n",
      "Stage: add annotation control args\n",
      "Stage: fixed method name\n",
      "Stage: add annotation control args\n",
      "Stage: fixed method name\n",
      "Updating pype config: applying staged changes\n",
      "\n",
      "\n",
      "------------+++ new pype iteration 2022-07-29 11:26:31 +++--------------\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "PREPROCESSING\n",
      "detect_reference\n",
      "---------------------------------------------------\n",
      "Reference card found with 251 keypoint matches:\n",
      "template image has 36.427 pixel per mm.\n",
      "current image has 35.267 pixel per mm.\n",
      "= 96.816 %% of template image.\n",
      "---------------------------------------------------\n",
      "write_comment\n",
      "ID\n",
      "\n",
      "\n",
      "MEASUREMENT\n",
      "set_landmark\n",
      "\"get_annotation\" failed!\n",
      "\n",
      "\n",
      "VISUALIZATION\n",
      "draw_landmark\n",
      "draw_reference\n",
      "\n",
      "\n",
      "EXPORT\n",
      "save_annotation\n",
      "- creating new annotation file\n",
      "- no annotation_type selected - exporting all annotations\n",
      "- writing annotations of type \"reference\" with id \"a\" to \"annotations_v1.json\"\n",
      "- writing annotations of type \"comment\" with id \"a\" to \"annotations_v1.json\"\n",
      "- writing annotations of type \"landmark\" with id \"a\" to \"annotations_v1.json\"\n",
      "\n",
      "\n",
      "------------+++ finished pype iteration +++--------------\n",
      "-------(End with Ctrl+Enter or re-run with Enter)--------\n",
      "\n",
      "\n",
      "AUTOSHOW\n",
      "\n",
      "\n",
      "------------+++ new pype iteration 2022-07-29 11:26:44 +++--------------\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "PREPROCESSING\n",
      "detect_reference\n",
      "- loaded existing annotation of type \"reference\" with ID \"a\": skipping (edit=False)\n",
      "write_comment\n",
      "- loaded existing annotation of type \"comment\" with ID \"a\": skipping (edit=False)\n",
      "\n",
      "\n",
      "MEASUREMENT\n",
      "set_landmark\n",
      "- loaded existing annotation of type \"landmark\" with ID \"a\": skipping (edit=False)\n",
      "\n",
      "\n",
      "VISUALIZATION\n",
      "draw_landmark\n",
      "draw_reference\n",
      "\n",
      "\n",
      "EXPORT\n",
      "save_annotation\n",
      "- loading existing annotation file\n",
      "- no annotation_type selected - exporting all annotations\n",
      "- updating annotations of type \"reference\" with id \"a\" in \"annotations_v1.json\" (overwrite=\"entry\")\n",
      "- updating annotations of type \"comment\" with id \"a\" in \"annotations_v1.json\" (overwrite=\"entry\")\n",
      "- updating annotations of type \"landmark\" with id \"a\" in \"annotations_v1.json\" (overwrite=\"entry\")\n",
      "\n",
      "\n",
      "------------+++ finished pype iteration +++--------------\n",
      "-------(End with Ctrl+Enter or re-run with Enter)--------\n",
      "\n",
      "\n",
      "AUTOSHOW\n",
      "\n",
      "\n",
      "TERMINATE\n",
      "\n",
      "AUTOSAVE\n",
      "- save_canvas\n",
      "- image saved under D:\\git-repos\\phenopype\\phenopype-gallery\\_temp\\project_2\\data\\0__stickle1\\canvas_v1.jpg.\n",
      "\n",
      "AUTOLOAD\n",
      "- reference template image loaded from root directory\n",
      "Stage: add annotation control args\n",
      "Stage: add annotation control args\n",
      "Stage: fixed method name\n",
      "Stage: add annotation control args\n",
      "Stage: fixed method name\n",
      "Updating pype config: applying staged changes\n",
      "\n",
      "\n",
      "------------+++ new pype iteration 2022-07-29 11:26:45 +++--------------\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "PREPROCESSING\n",
      "detect_reference\n",
      "---------------------------------------------------\n",
      "Reference card found with 219 keypoint matches:\n",
      "template image has 36.427 pixel per mm.\n",
      "current image has 35.202 pixel per mm.\n",
      "= 96.636 %% of template image.\n",
      "---------------------------------------------------\n",
      "write_comment\n",
      "ID\n",
      "\n",
      "\n",
      "MEASUREMENT\n",
      "set_landmark\n",
      "\"get_annotation\" failed!\n",
      "\n",
      "\n",
      "VISUALIZATION\n",
      "draw_landmark\n",
      "draw_reference\n",
      "\n",
      "\n",
      "EXPORT\n",
      "save_annotation\n",
      "- creating new annotation file\n",
      "- no annotation_type selected - exporting all annotations\n",
      "- writing annotations of type \"reference\" with id \"a\" to \"annotations_v1.json\"\n",
      "- writing annotations of type \"comment\" with id \"a\" to \"annotations_v1.json\"\n",
      "- writing annotations of type \"landmark\" with id \"a\" to \"annotations_v1.json\"\n",
      "\n",
      "\n",
      "------------+++ finished pype iteration +++--------------\n",
      "-------(End with Ctrl+Enter or re-run with Enter)--------\n",
      "\n",
      "\n",
      "AUTOSHOW\n",
      "\n",
      "\n",
      "TERMINATE\n",
      "\n",
      "AUTOSAVE\n",
      "- save_canvas\n",
      "- image saved under D:\\git-repos\\phenopype\\phenopype-gallery\\_temp\\project_2\\data\\0__stickle2\\canvas_v1.jpg.\n",
      "\n",
      "AUTOLOAD\n",
      "- reference template image loaded from root directory\n",
      "Stage: add annotation control args\n",
      "Stage: add annotation control args\n",
      "Stage: fixed method name\n",
      "Stage: add annotation control args\n",
      "Stage: fixed method name\n",
      "Updating pype config: applying staged changes\n",
      "\n",
      "\n",
      "------------+++ new pype iteration 2022-07-29 11:26:55 +++--------------\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "PREPROCESSING\n",
      "detect_reference\n",
      "---------------------------------------------------\n",
      "Reference card found with 246 keypoint matches:\n",
      "template image has 36.427 pixel per mm.\n",
      "current image has 35.227 pixel per mm.\n",
      "= 96.707 %% of template image.\n",
      "---------------------------------------------------\n",
      "write_comment\n",
      "ID\n",
      "\n",
      "\n",
      "MEASUREMENT\n",
      "set_landmark\n",
      "\"get_annotation\" failed!\n",
      "\n",
      "\n",
      "VISUALIZATION\n",
      "draw_landmark\n",
      "draw_reference\n",
      "\n",
      "\n",
      "EXPORT\n",
      "save_annotation\n",
      "- creating new annotation file\n",
      "- no annotation_type selected - exporting all annotations\n",
      "- writing annotations of type \"reference\" with id \"a\" to \"annotations_v1.json\"\n",
      "- writing annotations of type \"comment\" with id \"a\" to \"annotations_v1.json\"\n",
      "- writing annotations of type \"landmark\" with id \"a\" to \"annotations_v1.json\"\n",
      "\n",
      "\n",
      "------------+++ finished pype iteration +++--------------\n",
      "-------(End with Ctrl+Enter or re-run with Enter)--------\n",
      "\n",
      "\n",
      "AUTOSHOW\n",
      "\n",
      "\n",
      "TERMINATE\n",
      "\n",
      "AUTOSAVE\n",
      "- save_canvas\n",
      "- image saved under D:\\git-repos\\phenopype\\phenopype-gallery\\_temp\\project_2\\data\\0__stickle3\\canvas_v1.jpg.\n"
     ]
    }
   ],
   "source": [
    "## run image processing\n",
    "for path in proj.dir_paths:\n",
    "    pp.Pype(path, tag=\"v1\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Created D:\\git-repos\\phenopype\\phenopype-gallery\\_temp\\project_2\\results\\annotations\n",
      "Search string: ['annotations_v1']\n",
      "Collected annotations_v1.json from 0__stickle1\n",
      "0__stickle1_annotations_v1.json saved under D:\\git-repos\\phenopype\\phenopype-gallery\\_temp\\project_2\\results\\annotations\\0__stickle1_annotations_v1.json.\n",
      "Collected annotations_v1.json from 0__stickle2\n",
      "0__stickle2_annotations_v1.json saved under D:\\git-repos\\phenopype\\phenopype-gallery\\_temp\\project_2\\results\\annotations\\0__stickle2_annotations_v1.json.\n",
      "Collected annotations_v1.json from 0__stickle3\n",
      "0__stickle3_annotations_v1.json saved under D:\\git-repos\\phenopype\\phenopype-gallery\\_temp\\project_2\\results\\annotations\\0__stickle3_annotations_v1.json.\n"
     ]
    }
   ],
   "source": [
    "proj.collect_results(files=[\"canvas\", \"landmark\"], tag=\"v1\", aggregate_csv=True, overwrite=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.18"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
