{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Counting isopods\n",
    "\n",
    "For a more detailed description see: <https://www.phenopype.org/gallery/projects/isopod-counting/>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "phenopype successfully imported the following plugin dependencies:\n",
      "torch\n"
     ]
    }
   ],
   "source": [
    "import phenopype as pp\n",
    "import os \n",
    "\n",
    "## my root directory - modify as you see fit \n",
    "os.chdir(r\"D:\\science\\packages\\phenopype\\phenopype-gallery_exec\")\n",
    "\n",
    "## my laptop has a small screen, so I use a smaller phenopype window\n",
    "pp._config.window_max_dim = 800"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Make phenopype project\n",
    "\n",
    "Create a phenopype project (remember, `Project` is used to both create new projects, and load existing ones). Different phenopype projects can be useful, e.g., to process different batches of images from field seasons, perspectives, etc,. It makes sense to create them side by side in a subfolder, which I call \"phenopype\". Thus, my research projects often have the following directory structure (just my way of working - this is really totally up to you):\n",
    "\n",
    "```\n",
    "my-project\n",
    "    data                       # processed data (e.g., tables)\n",
    "    data_raw                   # raw data (images, videos, etc.)\n",
    "    phenopype                  # phenopype projects\n",
    "    phenopype_templates        # phenopype .yaml config templates\n",
    "    scripts                    # python, R, etc.\n",
    "    [...]                      # manuscripts, figures, literature, etc.\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--------------------------------------------\n",
      "Found existing project root directory - loading from:\n",
      "D:\\science\\packages\\phenopype\\phenopype-gallery_exec\\phenopype\\counting-isopods\n",
      "\n",
      "Checks for directory completeness passed!\n",
      "\n",
      "Project \"counting-isopods\" successfully loaded with 4 images\n",
      "--------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "proj = pp.Project(r\"phenopype\\counting-isopods\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--------------------------------------------\n",
      "phenopype will search for image files at\n",
      "\n",
      "D:\\science\\packages\\phenopype\\phenopype-gallery_exec\\data_raw\\isopod-counting\n",
      "\n",
      "using the following settings:\n",
      "\n",
      "filetypes: ['jpg', 'JPG', 'jpeg', 'JPEG', 'tif', 'png', 'bmp'], include: [], exclude: [], mode: copy, recursive: False, resize: False, unique: path\n",
      "\n",
      "Found image isopods1.jpg - 0__isopods1 already exists (overwrite=False)\n",
      "Found image isopods2.jpg - 0__isopods2 already exists (overwrite=False)\n",
      "Found image isopods3.jpg - 0__isopods3 already exists (overwrite=False)\n",
      "Found image isopods4.jpg - 0__isopods4 already exists (overwrite=False)\n",
      "\n",
      "Found 4 files - using all\n",
      "--------------------------------------------\n",
      "- template saved under D:\\science\\packages\\phenopype\\phenopype-gallery_exec\\phenopype\\counting-isopods\\data\\0__isopods1\\pype_config_v1.yaml\n",
      "- template saved under D:\\science\\packages\\phenopype\\phenopype-gallery_exec\\phenopype\\counting-isopods\\data\\0__isopods2\\pype_config_v1.yaml\n",
      "- template saved under D:\\science\\packages\\phenopype\\phenopype-gallery_exec\\phenopype\\counting-isopods\\data\\0__isopods3\\pype_config_v1.yaml\n",
      "- template saved under D:\\science\\packages\\phenopype\\phenopype-gallery_exec\\phenopype\\counting-isopods\\data\\0__isopods4\\pype_config_v1.yaml\n"
     ]
    }
   ],
   "source": [
    "proj.add_files(image_dir = r\"data_raw\\isopod-counting\")\n",
    "proj.add_config(template_path=r\"phenopype_templates\\isopod-counting_template1.yaml\", tag=\"v1\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```{figure} ../_assets/images/stickleback-landmarks_reference.gif\n",
    "---\n",
    "width: 600px\n",
    "---\n",
    "Add a project-wide size and color reference that will be detected in the images. Don't forget to set the project-wide reference tag, which is useful in case your project uses multiple reference cards.\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Reference image not saved, file already exists - use \"overwrite==True\" or chose different name.\n",
      "setting active global project reference to \"iso-scale\" for 0__isopods1 (active=True)\n",
      "setting active global project reference to \"iso-scale\" for 0__isopods2 (active=True)\n",
      "setting active global project reference to \"iso-scale\" for 0__isopods3 (active=True)\n",
      "setting active global project reference to \"iso-scale\" for 0__isopods4 (active=True)\n"
     ]
    }
   ],
   "source": [
    "proj.add_reference(reference_image_path=os.path.join(r\"data_raw\\isopod-counting\",\"isopods1.jpg\"), reference_tag=\"iso-scale\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, loop through the images of the project with the `Pype` class. First, create a mask around all specimens, then edit any errors to the contours if necessary:\n",
    "\n",
    "```{figure} ../_assets/images/isopod-counting_mask.gif\n",
    "---\n",
    "width: 600px\n",
    "---\n",
    "```\n",
    "\n",
    "Some comments on the settings: changing `blocksize` and `constant` on the threshold algorithm has a great effect on the result. This becomes evident when looking at the binarized image, which shows increasing blocksizes. You can inspect the binary images yourself by selecting `canvas: mod` in `- select_canvas`.\n",
    "\n",
    "```{figure} ../_assets/images/isopod-coutning_thresholding.jpg\n",
    "---\n",
    "width: 600px\n",
    "---\n",
    "```\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "AUTOLOAD\n",
      "- reference template image loaded from root directory\n",
      "- starting config file monitor\n",
      "\n",
      "\n",
      "------------+++ new pype iteration 2023-11-14 13:04:03 +++--------------\n",
      "\n",
      "==> image name: isopods1.jpg\n",
      "\n",
      "\n",
      "PREPROCESSING\n",
      "create_mask\n",
      "BREAK\n",
      "\n",
      "\n",
      "------------+++ new pype iteration 2023-11-14 13:04:14 +++--------------\n",
      "\n",
      "==> image name: isopods1.jpg\n",
      "\n",
      "\n",
      "PREPROCESSING\n",
      "create_mask\n",
      "- loaded existing annotation of type \"mask\" with ID \"a\": skipping (edit=False)\n",
      "detect_reference\n",
      "---------------------------------------------------\n",
      "Reference card found with 264 keypoint matches:\n",
      "template image has 27.035 pixel per mm.\n",
      "current image has 27.069 pixel per mm.\n",
      "= 100.125 %% of template image.\n",
      "---------------------------------------------------\n",
      "blur\n",
      "\n",
      "\n",
      "SEGMENTATION\n",
      "threshold\n",
      "- decompose image: using blue channel\n",
      "- excluding pixels from reference\n",
      "morphology\n",
      "detect_contour\n",
      "- did not find any contours\n",
      "edit_contour\n",
      "Could not find contours to edit - check annotations.\n",
      "segmentation.edit_contour: AttributeError - '_GUI' object has no attribute 'image_bin_copy'\n",
      "detect_contour\n",
      "incompatible annotation type supplied - need \"drawing\" type\n",
      "- did not find any contours\n",
      "\n",
      "\n",
      "MEASUREMENT\n",
      "compute_shape_features\n",
      "compute_texture_features\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Computing texture features: 0it [00:00, ?it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "VISUALIZATION\n",
      "select_canvas\n",
      "- invalid selection - defaulting to raw image\n",
      "draw_contour\n",
      "draw_mask\n",
      "draw_reference\n",
      "\n",
      "\n",
      "EXPORT\n",
      "save_canvas\n",
      "- image saved under D:\\science\\packages\\phenopype\\phenopype-gallery_exec\\phenopype\\counting-isopods\\data\\0__isopods1\\canvas_v1.jpg.\n",
      "save_annotation\n",
      "- creating new annotation file\n",
      "- no annotation_type selected - exporting all annotations\n",
      "- writing annotations of type \"mask\" with id \"a\" to \"annotations_v1.json\"\n",
      "- writing annotations of type \"reference\" with id \"a\" to \"annotations_v1.json\"\n",
      "- writing annotations of type \"contour\" with id \"a\" to \"annotations_v1.json\"\n",
      "- writing annotations of type \"contour\" with id \"b\" to \"annotations_v1.json\"\n",
      "- writing annotations of type \"shape_features\" with id \"a\" to \"annotations_v1.json\"\n",
      "- writing annotations of type \"texture_features\" with id \"a\" to \"annotations_v1.json\"\n",
      "\n",
      "\n",
      "------------+++ finished pype iteration +++--------------\n",
      "-------(End with Ctrl+Enter or re-run with Enter)--------\n",
      "\n",
      "\n",
      "AUTOSHOW\n",
      "\n",
      "\n",
      "------------+++ new pype iteration 2023-11-14 13:04:23 +++--------------\n",
      "\n",
      "==> image name: isopods1.jpg\n",
      "\n",
      "\n",
      "PREPROCESSING\n",
      "create_mask\n",
      "- loaded existing annotation of type \"mask\" with ID \"a\": skipping (edit=False)\n",
      "BREAK\n",
      "\n",
      "\n",
      "------------+++ new pype iteration 2023-11-14 13:04:23 +++--------------\n",
      "\n",
      "==> image name: isopods1.jpg\n",
      "\n",
      "\n",
      "PREPROCESSING\n",
      "create_mask\n",
      "- loaded existing annotation of type \"mask\" with ID \"a\": skipping (edit=False)\n",
      "detect_reference\n",
      "- loaded existing annotation of type \"reference\" with ID \"a\": skipping (edit=False)\n",
      "blur\n",
      "\n",
      "\n",
      "SEGMENTATION\n",
      "threshold\n",
      "- decompose image: using blue channel\n",
      "- excluding pixels from reference\n",
      "morphology\n",
      "detect_contour\n",
      "- loaded existing annotation of type \"contour\" with ID \"a\": overwriting (edit=overwrite)\n",
      "- did not find any contours\n",
      "edit_contour\n",
      "Could not find contours to edit - check annotations.\n",
      "segmentation.edit_contour: AttributeError - '_GUI' object has no attribute 'image_bin_copy'\n",
      "detect_contour\n",
      "- loaded existing annotation of type \"contour\" with ID \"b\": overwriting (edit=overwrite)\n",
      "incompatible annotation type supplied - need \"drawing\" type\n",
      "- did not find any contours\n",
      "\n",
      "\n",
      "MEASUREMENT\n",
      "compute_shape_features\n",
      "- loaded existing annotation of type \"shape_features\" with ID \"a\": overwriting (edit=overwrite)\n",
      "compute_texture_features\n",
      "- loaded existing annotation of type \"texture_features\" with ID \"a\": overwriting (edit=overwrite)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Computing texture features: 0it [00:00, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "VISUALIZATION\n",
      "select_canvas\n",
      "- invalid selection - defaulting to raw image\n",
      "draw_contour\n",
      "draw_mask\n",
      "draw_reference\n",
      "\n",
      "\n",
      "EXPORT\n",
      "save_canvas\n",
      "- image saved under D:\\science\\packages\\phenopype\\phenopype-gallery_exec\\phenopype\\counting-isopods\\data\\0__isopods1\\canvas_v1.jpg (overwritten).\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "save_annotation\n",
      "- loading existing annotation file\n",
      "- no annotation_type selected - exporting all annotations\n",
      "- updating annotations of type \"mask\" with id \"a\" in \"annotations_v1.json\" (overwrite=\"entry\")\n",
      "- updating annotations of type \"reference\" with id \"a\" in \"annotations_v1.json\" (overwrite=\"entry\")\n",
      "- updating annotations of type \"contour\" with id \"a\" in \"annotations_v1.json\" (overwrite=\"entry\")\n",
      "- updating annotations of type \"contour\" with id \"b\" in \"annotations_v1.json\" (overwrite=\"entry\")\n",
      "- updating annotations of type \"shape_features\" with id \"a\" in \"annotations_v1.json\" (overwrite=\"entry\")\n",
      "- updating annotations of type \"texture_features\" with id \"a\" in \"annotations_v1.json\" (overwrite=\"entry\")\n",
      "\n",
      "\n",
      "------------+++ finished pype iteration +++--------------\n",
      "-------(End with Ctrl+Enter or re-run with Enter)--------\n",
      "\n",
      "\n",
      "AUTOSHOW\n",
      "\n",
      "\n",
      "------------+++ new pype iteration 2023-11-14 13:04:27 +++--------------\n",
      "\n",
      "==> image name: isopods1.jpg\n",
      "\n",
      "\n",
      "PREPROCESSING\n",
      "create_mask\n",
      "- loaded existing annotation of type \"mask\" with ID \"a\": editing (edit=True)\n",
      "detect_reference\n",
      "- loaded existing annotation of type \"reference\" with ID \"a\": skipping (edit=False)\n",
      "blur\n",
      "\n",
      "\n",
      "SEGMENTATION\n",
      "threshold\n",
      "- decompose image: using blue channel\n",
      "- excluding pixels from reference\n",
      "morphology\n",
      "detect_contour\n",
      "- loaded existing annotation of type \"contour\" with ID \"a\": overwriting (edit=overwrite)\n",
      "- found 24 contours that match criteria\n",
      "edit_contour\n",
      "BREAK\n",
      "\n",
      "\n",
      "------------+++ new pype iteration 2023-11-14 13:04:35 +++--------------\n",
      "\n",
      "==> image name: isopods1.jpg\n",
      "\n",
      "\n",
      "PREPROCESSING\n",
      "create_mask\n",
      "- loaded existing annotation of type \"mask\" with ID \"a\": skipping (edit=False)\n",
      "detect_reference\n",
      "- loaded existing annotation of type \"reference\" with ID \"a\": skipping (edit=False)\n",
      "blur\n",
      "\n",
      "\n",
      "SEGMENTATION\n",
      "threshold\n",
      "- decompose image: using blue channel\n",
      "- excluding pixels from reference\n",
      "morphology\n",
      "detect_contour\n",
      "- loaded existing annotation of type \"contour\" with ID \"a\": overwriting (edit=overwrite)\n",
      "- found 24 contours that match criteria\n",
      "edit_contour\n",
      "- loaded existing annotation of type \"drawing\" with ID \"a\": skipping (edit=False)\n",
      "detect_contour\n",
      "- loaded existing annotation of type \"contour\" with ID \"b\": overwriting (edit=overwrite)\n",
      "- found 24 contours that match criteria\n",
      "\n",
      "\n",
      "MEASUREMENT\n",
      "compute_shape_features\n",
      "- loaded existing annotation of type \"shape_features\" with ID \"a\": overwriting (edit=overwrite)\n",
      "compute_texture_features\n",
      "- loaded existing annotation of type \"texture_features\" with ID \"a\": overwriting (edit=overwrite)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Computing texture features: 100%|██████████████████████████████████| 24/24 [00:02<00:00,  8.26it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "VISUALIZATION\n",
      "select_canvas\n",
      "- invalid selection - defaulting to raw image\n",
      "draw_contour\n",
      "draw_mask\n",
      "draw_reference\n",
      "\n",
      "\n",
      "EXPORT\n",
      "save_canvas\n",
      "- image saved under D:\\science\\packages\\phenopype\\phenopype-gallery_exec\\phenopype\\counting-isopods\\data\\0__isopods1\\canvas_v1.jpg (overwritten).\n",
      "save_annotation\n",
      "- loading existing annotation file\n",
      "- no annotation_type selected - exporting all annotations\n",
      "- updating annotations of type \"mask\" with id \"a\" in \"annotations_v1.json\" (overwrite=\"entry\")\n",
      "- updating annotations of type \"reference\" with id \"a\" in \"annotations_v1.json\" (overwrite=\"entry\")\n",
      "- updating annotations of type \"contour\" with id \"a\" in \"annotations_v1.json\" (overwrite=\"entry\")\n",
      "- updating annotations of type \"contour\" with id \"b\" in \"annotations_v1.json\" (overwrite=\"entry\")\n",
      "- updating annotations of type \"shape_features\" with id \"a\" in \"annotations_v1.json\" (overwrite=\"entry\")\n",
      "- updating annotations of type \"texture_features\" with id \"a\" in \"annotations_v1.json\" (overwrite=\"entry\")\n",
      "- writing annotations of type \"drawing\" with id \"a\" to \"annotations_v1.json\"\n",
      "\n",
      "\n",
      "------------+++ finished pype iteration +++--------------\n",
      "-------(End with Ctrl+Enter or re-run with Enter)--------\n",
      "\n",
      "\n",
      "AUTOSHOW\n"
     ]
    },
    {
     "ename": "SystemExit",
     "evalue": "\n\nTERMINATE (by user)",
     "output_type": "error",
     "traceback": [
      "An exception has occurred, use %tb to see the full traceback.\n",
      "\u001b[1;31mSystemExit\u001b[0m\u001b[1;31m:\u001b[0m \n\nTERMINATE (by user)\n"
     ]
    }
   ],
   "source": [
    "for path in proj.dir_paths:\n",
    "    pp.Pype(path, tag=\"v1\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Once you're done, collect the results "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "file \"canvas\": found 4 results in 4 project folders\n",
      "No files found under the given location that match given criteria.\n",
      "file \"shape\": found 1 results in 4 project folders\n",
      "No files found under the given location that match given criteria.\n",
      "file \"texture\": found 1 results in 4 project folders\n"
     ]
    }
   ],
   "source": [
    "proj.collect_results(files=[\"canvas\", \"shape\", \"texture\"], tag=\"v1\", aggregate_csv=True, overwrite=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.18"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
